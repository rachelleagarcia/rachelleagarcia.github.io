I"¯<p>In this post, I‚Äôll be writing about poisoning name services like LLMNR, and it‚Äôs predecessor, NBT-NS, used in Active Directory. I‚Äôll be going in-depth about how it works, the exploitation, and the different ways to defend against these types of attacks.</p>

<h2 id="introduction">Introduction</h2>

<p>Before we start exploitation, I think it‚Äôs helpful to talk about what LLMNR and NBT-NS are.</p>

<ul>
  <li>LLNMR = Link-Local Multicast Name Resolution</li>
  <li>NBT-NS = NetBIOS Name Service</li>
</ul>

<p>Both LLMNR and NBT-NS are alternative methods of host identification and used when a Windows host can‚Äôt resolve a hostname using DNS. When this happens, LLMNR will be used first, and it uses neighbouring computers to see if they know the hostname. And if LLMNR fails, NBT-NS is used next.</p>

<h3 id="how-it-works">How it works</h3>

<p>Poisoning the LLNMR or NBT-NS can also be known as a <a href="https://www.rapid7.com/fundamentals/man-in-the-middle-attacks/">man-in-the-middle attack</a>.</p>

<p>It works by using Responder to listen for any queries on the same network that the other Windows clients are on, and when DNS fails, and the Windows clients use LLMNR requests, the victims hash will show up on the attacker‚Äôs machine.</p>

<p><img src="/images/blog/llmnr/intro.png" alt="poisoning llmnr and nbt-ns" /></p>

<p>The victim‚Äôs hash shows up on the attacker‚Äôs machine because when LLMNR or NBT-NS is used to resolve a hostname, any host on the network can reply. And since an attacker can use Responder as a tool, it will poison the request and give the attacker the victim‚Äôs hashed password.</p>

<p>Now that we know a bit more about what it is and how it works, let‚Äôs go through the exploitation.</p>

<h2 id="exploitation">Exploitation</h2>

<p><em>As a disclaimer, I created my own Active Directory service (a.k.a home lab) to explain how this exploitation works. To create my own AD service, I used multiple virtual machines‚Äìone with Kali and one with Windows running on Active Directory. Please do not use this exploit to harm others.</em></p>

<h3 id="the-setup">The Setup</h3>

<p>Now, I‚Äôve slightly introduced you to Responder, this is the tool that we‚Äôll be using to poison LLMNR or NBT-NS. Responder was created and is frequently updated by Laurent Gaffie. If you‚Äôd like to read more about Responder, here‚Äôs a link to the GitHub page:</p>

<p><a href="https://github.com/lgandx/Responder">Responder - LLMNR/NBT-NS/mDNS Poisoner and NTLMv1/2 Relay</a></p>

<p>Another tool we‚Äôll be using is Hashcat, this tool will be used to crack the hash to obtain the victim‚Äôs password. Hashcat should already be preinstalled on Kali Linux, if not, here‚Äôs the webpage for it:</p>

<p><a href="https://hashcat.net/hashcat/">Hashcat - Advanced Password Recovery</a></p>

<p>Great, once you have the above tools. Let‚Äôs get started.</p>

<h3 id="responder">Responder</h3>

<p>In Kali, we‚Äôll open Responder by typing in terminal <code class="language-plaintext highlighter-rouge">responder -I eth0 -rdwv</code> if you‚Äôre not sure what the options mean, you can always type <code class="language-plaintext highlighter-rouge">-h</code> so it displays the different options.</p>

<p>When Responder opens, note the Responder IP address <strong>192.168.250.128</strong>.</p>

<p><img src="/images/blog/llmnr/responder.jpg" alt="running responder" /></p>

<p>We‚Äôll use the IP address to manually enter it into our ‚Äúvictim‚Äôs‚Äù machine. Though, under a standard penetration test, we would wait for DNS to fail. Since this is an example, we can simply force the connection to see what it looks like.</p>

<p>Next, we can simply copy the IP address, <strong>192.168.250.128</strong>, and enter it into File Explorer.</p>

<p><img src="/images/blog/llmnr/windows.jpg" alt="victim's machine" /></p>

<p>Once the IP address is entered, in Kali, we should see in Responder that it returned the call and the hashed password for the user.  We can save the hashed password into a file called hash.txt and use Hashcat to crack the password.</p>

<p><img src="/images/blog/llmnr/hash.jpg" alt="hashed response from responder" /></p>

<h3 id="hashcat">Hashcat</h3>

<p>Active Directory uses NTLMv2 for authentication, so when we use Hashcat, we‚Äôll want to make sure we‚Äôre selecting the right method. We can use <code class="language-plaintext highlighter-rouge">grep</code> to locate the correct one if you‚Äôre not sure. In this case, it‚Äôs the third one <strong>NetNLTMv2</strong>.</p>

<p><img src="/images/blog/llmnr/hashcat.jpg" alt="hashcat modes" /></p>

<p>To use Hashcat, we can type in the Kali terminal:</p>

<p><code class="language-plaintext highlighter-rouge">hashcat -m 5600 hash.txt rockyou.txt --force</code></p>

<p>The <strong>rockyou.txt</strong> file is a file that contains a list of frequently used passwords. This is why it‚Äôs extremely important to use strong (and long) passwords to prevent these types of attacks from happening in the first place.</p>

<p>Now, let‚Äôs press enter.</p>

<p><img src="/images/blog/llmnr/hashcatresults.jpg" alt="hashcat modes" /></p>

<p>There we go! We can see that the user‚Äôs password is set to <strong>Password1</strong>, and we can see that it only took two seconds to crack the password‚Äìeasy peasy.</p>

<h2 id="defence-mechanisms">Defence Mechanisms</h2>

<p>Now that we know how the attack works, the best way to prevent it? Disable LLMNR and NBT-NS! Especially if it‚Äôs not being used, and if it‚Äôs not clear yet, please ensure that all users have strong passwords (the longer, the better).</p>

:ET